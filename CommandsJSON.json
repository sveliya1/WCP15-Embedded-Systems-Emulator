{
  "ADC": "A1 = A1 + A2 + carry ;",
  "ADD": "A1 = A1 + A2 ;",
  "AND": "A1 = A1 and A2 ;",
  "B": "R15 = ADDRESS ;",
  "BIC": "A1 = A1 and NOT A2 ;",
  "BL": "R14 = ADDRESS ; R15 = A1 ;",
  "BX": "R15 = A1 ; \n T bit = Rn[0] ;",
  "CDP": "//(Coprocessor-specific) ;",
  "CMN": "//cpsr flags = A1 + A2 ;",
  "CMP": "Z = ( ( A1 -  A2 ) == 0 ) ;\n if(A1 > A2){ N = FaLsE ; } Else { N = TRUE }\n C = FaLsE //TODO \n V = FaLsE //TODO \n",
  "EOR": "A1 = (A1 and NOT A2) OR (A2 and NOT A1) ;",
  "LDC": "//Coprocessor load ;",
  "LDM": "//stack manipulation (Pop) ;",
  "LDR": "A1 = Memory[ S2_3 /8 ] ;",
  "MCR": "cA1 = rA1 {<op>cRm} ;",
  "MLA": "A1 = (Rm * Rs) + A1 ;",
  "MOV": "A1 = A2 ;",
  "MRC": "A1 = cA1 {<op>cRm} ;",
  "MRS": "A1 = PSR ;",
  "MSR": "PSR = Rm ;",
  "MUL": "A1 = Rm * Rs ;",
  "MVN": "A1 = 0xFFFFFFFF EOR A2 ;",
  "ORR": "A1 = A1 OR A2 ;",
  "RSB": "A1 = A2 - A1 ;",
  "RSC": "A1 = A2 - A1 - 1 + Carry ;",
  "SBC": "A1 = A1 - A2 - 1 + Carry ;",
  "STC": "ADDRESS = CA1 ;",
  "PUSH": "//stack manipulation (Push) ;",
  "STR": "<ADDRESS> = A1 ;",
  "SUB": "A1 = A1 - A2 ;",
  "SWI": "OS call ;",
  "SWP": "A1 = [A1], [A1] := Rm ;",
  "TEQ": "cpsr flags = A1 EOR A2 ;",
  "TST": "cpsr flags = A1 and A2 ;",
  "LSRS": "A1 = (A2 >> A3) ;",
  "LSLS": "A1 = (A2 << A3) ;"
}